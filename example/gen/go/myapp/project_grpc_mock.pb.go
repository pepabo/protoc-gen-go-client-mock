// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: myapp/project.proto

package myapp

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockProjectService_ListProjectsClient is a mock of ProjectService_ListProjectsClient interface.
type MockProjectService_ListProjectsClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectService_ListProjectsClientMockRecorder
}

// MockProjectService_ListProjectsClientMockRecorder is the mock recorder for MockProjectService_ListProjectsClient.
type MockProjectService_ListProjectsClientMockRecorder struct {
	mock *MockProjectService_ListProjectsClient
}

// NewMockProjectService_ListProjectsClient creates a new mock instance.
func NewMockProjectService_ListProjectsClient(ctrl *gomock.Controller) *MockProjectService_ListProjectsClient {
	mock := &MockProjectService_ListProjectsClient{ctrl: ctrl}
	mock.recorder = &MockProjectService_ListProjectsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectService_ListProjectsClient) EXPECT() *MockProjectService_ListProjectsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockProjectService_ListProjectsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockProjectService_ListProjectsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockProjectService_ListProjectsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockProjectService_ListProjectsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockProjectService_ListProjectsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProjectService_ListProjectsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockProjectService_ListProjectsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockProjectService_ListProjectsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockProjectService_ListProjectsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockProjectService_ListProjectsClient) Recv() (*ProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockProjectService_ListProjectsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockProjectService_ListProjectsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockProjectService_ListProjectsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockProjectService_ListProjectsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProjectService_ListProjectsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockProjectService_ListProjectsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockProjectService_ListProjectsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProjectService_ListProjectsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockProjectService_ListProjectsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockProjectService_ListProjectsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockProjectService_ListProjectsClient)(nil).Trailer))
}

// MockProjectService_ListProjectsServer is a mock of ProjectService_ListProjectsServer interface.
type MockProjectService_ListProjectsServer struct {
	ctrl     *gomock.Controller
	recorder *MockProjectService_ListProjectsServerMockRecorder
}

// MockProjectService_ListProjectsServerMockRecorder is the mock recorder for MockProjectService_ListProjectsServer.
type MockProjectService_ListProjectsServerMockRecorder struct {
	mock *MockProjectService_ListProjectsServer
}

// NewMockProjectService_ListProjectsServer creates a new mock instance.
func NewMockProjectService_ListProjectsServer(ctrl *gomock.Controller) *MockProjectService_ListProjectsServer {
	mock := &MockProjectService_ListProjectsServer{ctrl: ctrl}
	mock.recorder = &MockProjectService_ListProjectsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectService_ListProjectsServer) EXPECT() *MockProjectService_ListProjectsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockProjectService_ListProjectsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockProjectService_ListProjectsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProjectService_ListProjectsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockProjectService_ListProjectsServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockProjectService_ListProjectsServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProjectService_ListProjectsServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockProjectService_ListProjectsServer) Send(arg0 *ProjectResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProjectService_ListProjectsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProjectService_ListProjectsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockProjectService_ListProjectsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockProjectService_ListProjectsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockProjectService_ListProjectsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockProjectService_ListProjectsServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockProjectService_ListProjectsServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProjectService_ListProjectsServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockProjectService_ListProjectsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockProjectService_ListProjectsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockProjectService_ListProjectsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockProjectService_ListProjectsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockProjectService_ListProjectsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockProjectService_ListProjectsServer)(nil).SetTrailer), arg0)
}

// MockProjectServiceClient is a mock of ProjectServiceClient interface.
type MockProjectServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceClientMockRecorder
}

// MockProjectServiceClientMockRecorder is the mock recorder for MockProjectServiceClient.
type MockProjectServiceClientMockRecorder struct {
	mock *MockProjectServiceClient
}

// NewMockProjectServiceClient creates a new mock instance.
func NewMockProjectServiceClient(ctrl *gomock.Controller) *MockProjectServiceClient {
	mock := &MockProjectServiceClient{ctrl: ctrl}
	mock.recorder = &MockProjectServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectServiceClient) EXPECT() *MockProjectServiceClientMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProject", varargs...)
	ret0, _ := ret[0].(*ProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectServiceClientMockRecorder) CreateProject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectServiceClient)(nil).CreateProject), varargs...)
}

// ListProjects mocks base method.
func (m *MockProjectServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (ProjectService_ListProjectsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjects", varargs...)
	ret0, _ := ret[0].(ProjectService_ListProjectsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectServiceClientMockRecorder) ListProjects(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectServiceClient)(nil).ListProjects), varargs...)
}

// MockProjectServiceServer is a mock of ProjectServiceServer interface.
type MockProjectServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceServerMockRecorder
}

// MockProjectServiceServerMockRecorder is the mock recorder for MockProjectServiceServer.
type MockProjectServiceServerMockRecorder struct {
	mock *MockProjectServiceServer
}

// NewMockProjectServiceServer creates a new mock instance.
func NewMockProjectServiceServer(ctrl *gomock.Controller) *MockProjectServiceServer {
	mock := &MockProjectServiceServer{ctrl: ctrl}
	mock.recorder = &MockProjectServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectServiceServer) EXPECT() *MockProjectServiceServerMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectServiceServer) CreateProject(ctx context.Context, in *CreateProjectRequest) (*ProjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, in)
	ret0, _ := ret[0].(*ProjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectServiceServerMockRecorder) CreateProject(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectServiceServer)(nil).CreateProject), ctx, in)
}

// ListProjects mocks base method.
func (m *MockProjectServiceServer) ListProjects(blob *ListProjectsRequest, server ProjectService_ListProjectsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", blob, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockProjectServiceServerMockRecorder) ListProjects(blob, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockProjectServiceServer)(nil).ListProjects), blob, server)
}
